{"name":"yksp","tagline":"let 'em test 'emselves","body":"A fully Python-based tool that helps you automate Android UI testing and captures everything you need from each test session.\r\n\r\n* Generation of UI events independent of device screen sizes\r\n* Validation of UI elements with PyUnit assertions\r\n* Screenshots and dumps of their matching view tree\r\n* Logcat output for the duration of each test\r\n* App data dump after each test, including preferences and databases\r\n* Backup file that can be used to restore your device state from each test\r\n* Execution of tests on all connected devices in parallel\r\n* Device properties dump, including the device model and installed Android version\r\n\r\nYou can see yksp in action [here](https://www.facebook.com/video.php?v=688024157960505). Higher abstractions of UI interactions used to compose test scripts are available through [AndroidViewClient](https://github.com/dtmilano/AndroidViewClient) by @dtmilano. This project will focus on tools to inspect, correlate, and validate the set of generated test results. Pull requests are, of course, welcome.\r\n\r\n## Getting set up\r\nThis assumes your environment has `python`, `easy_install` and `git`. You may confirm each installation by typing the following commands in your Terminal.\r\n\r\n```\r\n$ which python\r\n$ which easy_install\r\n$ which git\r\n```\r\n\r\n### step one\r\nYou may skip this step if you already have the **Android SDK** installed.\r\n\r\nDownload the [Android SDK](http://developer.android.com/sdk/index.html). You may download the stand-alone package for your platform instead of the IDE bundles. After extracting the package, you need to download the following tools, as they are not included in the SDK package.\r\n\r\n1. Android SDK Tools\r\n2. Android SDK Platform-tools\r\n3. Android SDK Build-tools\r\n\r\nYou will download these tools by using yet another tool, which is included in the SDK package. Replace `android-sdk-root` with the local path to your extracted SDK root directory.\r\n\r\n```\r\n$ cd android-sdk-root/tools\r\n$ ./android list sdk --all\r\n$ ./android update sdk --no-ui --all --filter 1,2,3\r\n```\r\n\r\n### step two\r\nInstall **Pillow** and **AndroidViewClient**.\r\n\r\n```\r\n$ cd ~\r\n$ sudo easy_install --upgrade Pillow\r\n$ sudo easy_install --upgrade androidviewclient\r\n```\r\n\r\n### step three\r\nClone the **yksp** repo, and **AndroidViewClient** as a submodule.\r\n\r\n```\r\n$ git clone git://github.com/groundupworks/yksp.git\r\n$ cd yksp\r\n$ git submodule init\r\n$ git submodule update\r\n```\r\n\r\n### step four\r\nSet the environment variable `$YKSP_HOME`, and also `$ANDROID_HOME` if not already set. Then configure your `$PATH`.\r\n\r\nOn a Mac\r\n\r\n```\r\n$ sudo nano ~/.bash_profile\r\n```\r\n\r\nOn Ubuntu\r\n\r\n```\r\n$ sudo nano /etc/profile.d/yksp.sh\r\n```\r\n\r\nAdd the following text, replacing `android-sdk-root`, `yksp-root`, and `build-tools-version` with your local paths. Log out and log back in.\r\n\r\n```\r\nexport ANDROID_HOME=android-sdk-root\r\nexport YKSP_HOME=yksp-root/yksp\r\nexport PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/build-tools-version:$YKSP_HOME\r\n```\r\n\r\nMine looks something like this on the Mac.\r\n\r\n```\r\nexport ANDROID_HOME=/Users/benedict/Dev/android-sdk-macosx\r\nexport YKSP_HOME=/Users/benedict/Dev/projects/yksp/yksp\r\nexport PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/20.0.0:$YKSP_HOME\r\n```\r\n\r\nAnd... you're all set!\r\n\r\n## Running the example\r\nThe yksp repo has an `examples/flying-photo-booth-tests` folder, containing the [Flying PhotoBooth](https://play.google.com/store/apps/details?id=com.groundupworks.flyingphotobooth) APK, along with its PyUnit test scripts in a `scripts` folder. Connect one or more Android devices to your computer. Ensure that the device is made USB debuggable and screen lock is disabled (like, completely off... not even Swipe Unlock). This is how you would run a typical yksp test session.\r\n\r\n```\r\n$ cd $YKSP_HOME/../examples/flying-photo-booth-tests\r\n$ yksp\r\n```\r\n\r\nOberserve the test session logs in your Terminal, it should look as follow if everything is set up properly. Results are stored in the newly created `results` folder, with each test session in a folder named with its own timestamp.\r\n\r\n```\r\n$ yksp\r\nScanning for APK...\r\nAPK: flying-photo-booth-release.apk\r\nInspecting APK...\r\nPackage name: com.groundupworks.flyingphotobooth\r\nVersion name: 3.4\r\nVersion code: 13\r\nScanning for test scripts...\r\nScript 1: testAbandonLinking.py\r\nScript 2: testCapture.py\r\nListing devices...\r\nDevice 1: EP7309229R\r\n[EP7309229R] Collecting device properties...\r\n[EP7309229R] [ro.product.manufacturer]: [Sony]\r\n[EP7309229R] [ro.product.model]: [C6502]\r\n[EP7309229R] [ro.build.version.sdk]: [16]\r\n\r\n[EP7309229R] Installing APK...\r\n[EP7309229R] Preparing test case 1 of 2 [testAbandonLinking.py] on C6502...\r\n[EP7309229R] Wiping app data...\r\n[EP7309229R] Clearing logcat buffer...\r\n[EP7309229R] Start printing logcat output to file...\r\n[EP7309229R] Executing [testAbandonLinking.py] with command:\r\npython results/2014-09-24-09-34-28/C6502-[EP7309229R]/testAbandonLinking/testAbandonLinking.py --package com.groundupworks.flyingphotobooth --serial EP7309229R --root results/2014-09-24-09-34-28/C6502-[EP7309229R]/testAbandonLinking --logs pyunit.txt --screenshots screenshots --screendumps screendumps\r\n[EP7309229R] Logcat output saved\r\n[EP7309229R] Downloading app data from device...\r\n[EP7309229R] Extracting app data...\r\n\r\n1947+0 records in\r\n1947+0 records out\r\n1947 bytes transferred in 0.002251 secs (864984 bytes/sec)\r\nx apps/com.groundupworks.flyingphotobooth/_manifest\r\nx apps/com.groundupworks.flyingphotobooth/db/webviewCookiesChromiumPrivate.db\r\nx apps/com.groundupworks.flyingphotobooth/db/wings.db-journal\r\nx apps/com.groundupworks.flyingphotobooth/db/wings.db\r\nx apps/com.groundupworks.flyingphotobooth/db/webviewCookiesChromium.db\r\nx apps/com.groundupworks.flyingphotobooth/sp/com.facebook.SharedPreferencesTokenCachingStrategy.DEFAULT_KEY.xml\r\nx apps/com.groundupworks.flyingphotobooth/sp/com.groundupworks.flyingphotobooth_preferences.xml\r\n\r\n[EP7309229R] App data downloaded\r\n[EP7309229R] Wiping app data...\r\n[EP7309229R] Preparing test case 2 of 2 [testCapture.py] on C6502...\r\n[EP7309229R] Wiping app data...\r\n[EP7309229R] Clearing logcat buffer...\r\n[EP7309229R] Start printing logcat output to file...\r\n[EP7309229R] Executing [testCapture.py] with command:\r\npython results/2014-09-24-09-34-28/C6502-[EP7309229R]/testCapture/testCapture.py --package com.groundupworks.flyingphotobooth --serial EP7309229R --root results/2014-09-24-09-34-28/C6502-[EP7309229R]/testCapture --logs pyunit.txt --screenshots screenshots --screendumps screendumps\r\n[EP7309229R] Logcat output saved\r\n[EP7309229R] Downloading app data from device...\r\n[EP7309229R] Extracting app data...\r\n\r\n567+0 records in\r\n567+0 records out\r\n567 bytes transferred in 0.000659 secs (860409 bytes/sec)\r\nx apps/com.groundupworks.flyingphotobooth/_manifest\r\n\r\n[EP7309229R] App data downloaded\r\n[EP7309229R] Wiping app data...\r\n[EP7309229R] Uninstalling application...\r\nAll 2 test scripts executed on 1 device in 93 seconds\r\n```\r\n\r\n### what just happened?\r\nThe test session logs should give a pretty good idea of what yksp is doing, but here is a better view.\r\n\r\n```\r\nFind APK from your root directory\r\nFind test scripts from the scripts folder\r\nFind connected devices and write serials to serials.txt\r\nFor each device, run in parallel:\r\n    Collect device properties and write to device.txt\r\n    Install APK\r\n    For each test script:\r\n        Make a local copy of the test script\r\n        Wipe app data\r\n        Start logcat\r\n        Execute local copy of the test script:\r\n            Connect to and wake device in YkspTestCase.setUp()\r\n            Run each test...() method in your YkspTestCase subclass:\r\n                For each YkspTestCase.saveScreen() call:\r\n                    Save screenshot to the screenshots folder\r\n                    Save view tree dump to screendumps folder \r\n            Kill app in YkspTestCase.tearDown()\r\n            Write PyUnit test results to pyunit.txt\r\n        Stop logcat and write to logcat.txt\r\n        Dump app data to data.ab\r\n        Extract data.ab to data folder\r\n        Wipe app data\r\n    Uninstall application\r\nReport completion of test session\r\n```\r\n\r\n### where are my results?\r\nTest results are organized in a directory structure that would allow a script to easily walk the tree and generate reports from a data set involving multiple devices and test sessions.\r\n```\r\nresults\r\n    <DATETIME>\r\n        serials.txt\r\n        SERIAL-[MODEL]\r\n            device.txt\r\n            SCRIPT1\r\n                SCRIPT1.py\r\n                pyunit.txt\r\n                logcat.txt\r\n                data.ab\r\n                data\r\n                    ...\r\n                screenshots\r\n                    0-tag0.png\r\n                    1-tag1.png\r\n                    2-tag2.png\r\n                screendumps\r\n                    0-tag0.txt\r\n                    1-tag1.txt\r\n                    2-tag2.txt\r\n            SCRIPT2\r\n                SCRIPT2.py\r\n                pyunit.txt\r\n                logcat.txt\r\n                data.ab\r\n                data\r\n                    ...\r\n                screenshots\r\n                    0-tag3.png\r\n                    1-tag4.png\r\n                screendumps\r\n                    0-tag3.txt\r\n                    1-tag4.txt\r\n```\r\n\r\n## Creating test scripts\r\nTest scripts define subclasses of `YkspTestCase` based on the [PyUnit](https://wiki.python.org/moin/PyUnit) framework. You will define and implement one or more methods with names starting with `test`, like such `def testSomething(self):`. To figure out what goes in the implementation, a good way to start is to look at [testCapture.py](https://github.com/groundupworks/yksp/blob/master/examples/flying-photo-booth-tests/scripts/testCapture.py) and [testAbandonLinking.py](https://github.com/groundupworks/yksp/blob/master/examples/flying-photo-booth-tests/scripts/testAbandonLinking.py) in `examples/flying-photo-booth-tests/scripts`.\r\n\r\nFrom the examples, you will find that the `YkspTestCase` class provides the following convenience methods, documented [here](https://github.com/groundupworks/yksp/blob/master/yksp/yksptestcase.py).\r\n\r\n```python\r\nlaunchApp(package=None)\r\nrefreshScreen(sleep=1)\r\nsaveScreen(tag=None, sleep=1)\r\n```\r\n\r\nIt is important that `refreshScreen()` or `saveScreen()` be called after each screen transition on your device, in order for the test to pick up the updated view tree.\r\n\r\nTo send UI events to your device, we rely on [AndroidViewClient](https://github.com/dtmilano/AndroidViewClient) by @dtmilano. You have already downloaded the documentaion to here `$YKSP_HOME/../AndroidViewClient/AndroidViewClient/doc/index.html` as part of the submodule.\r\n\r\nTo pass or fail test cases, aside from visual inspection of screenshots, we mostly rely on exceptions raised by the `findView...()` methods from AndroidViewClient, as well as the family of `assert...()` methods available through the PyUnit framework.\r\n\r\nWhen writing test scripts, while you can find certain views by text sometimes, you will encounter UI elements like an image button, which you need to identify by a unique ID in the view tree. This is when the `dump` tool in AndroidViewClient becomes handy. Just manually navigate to the screen on your connected device, then type that in Terminal and pick out the ID you need from the view tree.\r\n\r\n```\r\n$ dump\r\nandroid.widget.FrameLayout  \r\n   android.widget.TextView com.groundupworks.flyingphotobooth:id/title PHOTO 1 OF 2\r\n   android.widget.ImageButton com.groundupworks.flyingphotobooth:id/switch_button \r\n   android.widget.ImageButton com.groundupworks.flyingphotobooth:id/preferences_button \r\n   android.widget.Button com.groundupworks.flyingphotobooth:id/start_button CAPTURE\r\n```\r\n\r\nLastly, it is important to remember that while an app data wipe is performed before and after running each test script to remove the persistent data stored, that is not the case in between test methods within the same script. Instead, the app is killed between test methods, which means in-memory states are destroyed, but disk-persisted states are carried across. For each test to have a true 'fresh start', it is recommended that you separate out your tests into different files, with only a single test method in each `YkspTestCase` subclass.\r\n\r\nAfter all that, here is a template to get you started!\r\n\r\n```python\r\n#! /usr/bin/env python\r\nimport sys\r\nimport os\r\n\r\ntry:\r\n    sys.path.append(os.environ['YKSP_HOME'])\r\nexcept:\r\n    pass\r\n\r\nfrom yksptestcase import YkspTestCase\r\n\r\nclass MyTestCase(YkspTestCase):\r\n\r\n    def testSomething(self):\r\n        '''\r\n        Tests something... like geese, mustard, cabbages and kings.\r\n        '''\r\n        self.launchApp()\r\n        self.saveScreen('my-start-screen', sleep=1)\r\n\r\n        # Your implementation...\r\n        \r\n\r\nif __name__ == '__main__':\r\n    YkspTestCase.main(sys.argv)\r\n```\r\n\r\n## Run options\r\nyksp has run options to support various use cases. You can see those by entering the following in your Terminal. \r\n\r\n```\r\n$ yksp --help\r\n\r\nUsage:\r\n-h, --help               OPTIONAL    print this help and exit\r\n-l, --linear             OPTIONAL    run tests on one device after another\r\n-a, --noapk <package>    OPTIONAL    disable APK installation and run tests using the pre-installed application with the specified package name\r\n-d, --nodump             OPTIONAL    disable app data dump after executing each test script\r\n```\r\n\r\n### --linear\r\nBy default, yksp spawns multiple processes to execute test scripts on all connected devices in parallel. You may force yksp to run the scripts on one device after another using this flag. It is useful when debugging your test scripts, since the test logs in your Terminal will look cleaner.\r\n\r\nNote that this does not imply everything is executed in a single process, as yksp uses multiple processes to do everything it needs to do even for a single device.\r\n\r\n### --noapk\r\nThis option allows launching off a pre-installed application, specified by its package name. No APK needs to be provided, and yksp will ignore any APK in your directory and skip installation (and uninstallation) altogether. A verification step is performed on each connected device to verify that the application is already installed, and the test scripts will be executed only on the subset of devices that are verified.\r\n\r\nThis option is useful for integrating yksp with your IDE for development. In Android Studio, you can have your **Run Configurations** deploy the APK but not launch any Activity, and instead launch an external tool with the following configurations, where `com.groundupworks.flyingphotobooth` is replaced by the package name of your app, and `some-directory` is any directory containing a `scripts` folder containing your test scripts.\r\n\r\n```\r\nProgram:           yksp\r\nParameters:        --noapk com.groundupworks.flyingphotobooth\r\nWorking directory: some-directory\r\n```\r\n\r\n### --nodump\r\nAfter executing each test script, yksp utilizes the `adb backup` command to generate the backup file `data.ab`. The file itself can be used to restore the device state, as it contains all the locally persisted app data, including preferences and databases. yksp also extracts the file into the `data` folder, which you can conveniently use to validate the state changes as a result of the test script.\r\n\r\nNote that if the application manifest has `android:allowBackup=\"false\"`, a `data.ab` file will be dumped out containing nothing. This is the correct behaviour and the absence of files in the extracted folder can be used to validate this.\r\n\r\nThe data dump is usually fast, but can optionally be disabled with this flag.\r\n\r\n## Mildly-faq\r\n####**Q:** Can my PyUnit test script mock out components in my application as part of the test?\r\n\r\n**A:** The short answer is no. yksp tests an APK, or a pre-installed app, as is. It cannot inject classes into your application, or switch up any build-time configurations. It doesn't mock parts of your application; it mocks you. One way around this limitation is to build the mock components into your APK, make the build-time configurations into run-time configurations, then use UI toggles or a special launch Intent to invoke a code path utilizing the mock components.\r\n\r\n####**Q:** How can I pass or fail my tests based on 'user-generated' events that don't result in UI implications?\r\n\r\n**A:** Again, yksp mocks out the user. Within the PyUnit test method, this mock user can generate events as input, and inspect the UI elements to validate the visible part of the output. However, input events can also result in output not  immediately visible through the UI, such as a state change:\r\n\r\n* of an in-memory variable\r\n* in locally persisted preferences or databases\r\n* on a remote server\r\n\r\nThe first one is irrelevant, unless there is a way to confirm it through the UI. If a human is to validate the second and third cases, it would be via a database dump, check some server state via a server API call, or in some cases, inspection of the logcat output may be sufficient. Although it is possible to do all of the above within the test case itself and do assertion, using regular Python and adb commands, the recommended way is to use the PyUnit assertions to validate only the UI.\r\n\r\nSince yksp dumps out the locally persisted app data and the logcat output after running each test script, just make use of those! Look at the results of the many test sessions as your data set, of which the PyUnit results is only one of the many components. You can write scripts to validate state changes, compare view trees and generate image similarity indices, correlate results across different devices and test sessions, and generate reports that are more comprehensive and meaningful.\r\n\r\n####**Q:** Why is the name weird?\r\n\r\n**A:** Maybe because it consists entirely of consonants? Although the *y* is debatable.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}